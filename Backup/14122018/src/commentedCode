  // let capabilityApisPromise;
    // //this.wrapper.nativeElement
    // const capabilityApisJS: any = document.createElement('script');

 


    
  require: any;
  ngAfterViewInit() {

    const capabilityApisJS: any = document.createElement('script');
    var capabilityApisPromise: any;
    try {
      capabilityApisJS.src = 'https://qsdev.mahindra.com/resources/assets/external/requirejs/require.js?qlikTicket=' + this.qTicket;
      document.head.appendChild(capabilityApisJS);
      capabilityApisJS.loaded = new Promise((resolve) => {
        capabilityApisJS.onload = () => { resolve(); };
      });

      const capabilityApisCSS: any = document.createElement('link');
      capabilityApisCSS.href = 'https://qsdev.mahindra.com/resources/autogenerated/qlik-styles.css?qlikTicket=' + this.qTicket;
      capabilityApisCSS.type = 'text/css';
      capabilityApisCSS.rel = 'stylesheet';
      document.head.appendChild(capabilityApisCSS);
      capabilityApisCSS.loaded = new Promise((resolve) => {
        capabilityApisCSS.onload = () => { resolve(); };
      });

      capabilityApisPromise = Promise.all([capabilityApisJS.loaded, capabilityApisCSS.loaded]);


      setTimeout(() => {
        console.log("Loaded Required files");

        var config = {
          host: 'qsdev.mahindra.com',
          prefix: '/',
          port: '',
          isSecure: true
        };

        this.require.config({
          baseUrl: "https://qsdev.mahindra.com/resources"
        });
      }, 2000);
    } catch (error) {
      this.loggerService.log('error', "[ConversationComponent] --> [ngAfterViewInit()] --> " + JSON.stringify(error));
    }
  }



  const loginSession = enigma.create({
            schema,
            url: `wss://${config.QlikSense.ENGINE_HOST}:${config.QlikSense.ENGINE_PORT}/app/${config.QlikSense.APP_ID}`,

            createSocket: url => new WebSocket(url, {
                ca: [readCert('root.pem')],
                key: readCert('client_key.pem'),
                cert: readCert('client.pem'),
                headers: {
                    'X-Qlik-User': `UserDirectory=${encodeURIComponent(config.QlikSense.USER_DIRECTORY)};
                     UserId=${encodeURIComponent(req.body.username)}`
                },
            }),
        });

        console.log("Login Session Object Created Sucessfully...");

        // use promisify here
        loginSession.open().then((global) => {
            var allLevelAccess = dataFetcher.checkAppLevelAccess(global);
            if (allLevelAccess) {
                QRS.getTicket(req.body.username, function (err, ticket) {

                    if (err) {
                        logger.error('error|Error while genrating Ticket ThoughUser Has App Level Access ');
                        res.send(utils.ResponseToReturn(200, "Error", 0, err));
                    }
                    else {
                        var ticketWithURl = "https://qsdev.mahindra.com:443/hub?qlikTicket=" + ticket.Ticket;
                        obj = {
                            "url": ticketWithURl,
                            "ticketInfo": ticket
                        }

                        logger.info(obj);
                        console.log("Ticket is Genrated Sucessfully...");
                    }
                });
            } else {
                return utils.ResponseToReturn(200, "Login Failed (App Level Access is not Granted)", 0, {});
            }
        });




         const sessionForChkingAppLevelAccess = enigma.create({
                    schema,
                    url: `wss://${config.QlikSense.SERVER}:${config.QlikSense.ENGINE_PORT}/app/${config.QlikSense.APP_ID}`,

                    createSocket: url => new WebSocket(url, {
                        ca: [readCert('root.pem')],
                        key: readCert('client_key.pem'),
                        cert: readCert('client.pem'),
                        headers: {
                            // in this we are sending user ID
                            'X-Qlik-User': `UserDirectory=${encodeURIComponent(config.userDirectory)}; UserId=${encodeURIComponent(req.body.username)}`
                        },
                    }),
                });
                
                sessionForChkingAppLevelAccess.open().then((global) => {
                    global.getDocList().then(function (list) { 
                        console.log(list);
                    });
                }).then((global)=>{
                    console.log("Sucessfully Opened A Session");
                }).catch((err)=>{
                    console.log(err);
                });